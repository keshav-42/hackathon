  # workflow_run:
  #   workflows: ["CI Pipeline"]
  #   types:
  #     - completed
name: CD Pipeline

on:
  workflow_dispatch: # Allows manual triggering of the pipeline
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted # Runs on your EC2 instance (self-hosted runner)
    steps:
      # Step 1: Pull Database Image
      - name: Pull PostgreSQL Image
        run: docker pull postgres:14

      # Step 2: Pull Backend Image
      - name: Pull Backend Image
        run: docker pull itzkeshav/backend:latest

      # Step 3: Pull Frontend Image
      - name: Pull Frontend Image
        run: docker pull itzkeshav/frontend:latest

      # Step 4: Stop and Remove Old Containers (if they exist)
      - name: Stop and Remove Old Containers
        run: |
          docker rm -f db || true
          docker rm -f backend || true
          docker rm -f frontend || true

      # Step 5: Run Database Container
      - name: Run Database Container
        run: |
          docker run -d \
            --name db \
            -e POSTGRES_USER=user \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=mydb \
            -p 5432:5432 \
            -v db_data:/var/lib/postgresql/data \
            --health-cmd="pg_isready -U user" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:14

      # Step 6: Run Backend Container
      - name: Run Backend Container
        run: |
          docker run -d \
            --name backend \
            -e DATABASE_URL=postgres://user:password@db:5432/mydb \
            -p 5000:5000 \
            itzkeshav/backend:latest

      # Step 7: Run Frontend Container
      - name: Run Frontend Container
        run: |
          docker run -d \
            --name frontend \
            -p 3000:3000 \
            itzkeshav/frontend:latest

      # Step 8: Verify Running Containers
      - name: Verify Containers Are Running
        run: docker ps